#!/usr/bin/env node
var argv = require('yargs').argv;
var TestRPC = require('..');
var pkg = require("../package.json");
var util = require("ethereumjs-util");

function parseAccounts(accounts) {
  function splitAccount(account) {
    account = account.split(',')
    return {
      secretKey: account[0],
      balance: account[1]
    };
  }

  if (typeof accounts === 'string')
    return [ splitAccount(accounts) ];
  else if (!Array.isArray(accounts))
    return;

  var ret = []
  for (var i = 0; i < accounts.length; i++) {
    ret.push(splitAccount(accounts[i]));
  }
  return ret;
}

if (argv.d || argv.deterministic) {
  argv.s = "TestRPC is awesome!";
}

var options = {
  port: argv.p || argv.port || 8545,
  debug: argv.debug,
  seed: argv.s || argv.seed,
  mnemonic: argv.m || argv.mnemonic,
  total_accounts: argv.a || argv.accounts,
  blocktime: argv.b || argv.blocktime,
  gasPrice: argv.g || argv.gasPrice,
  gasLimit: argv.l || argv.gasLimit,
  accounts: parseAccounts(argv.account),
  logger: console
}

var server = TestRPC.server(options);

console.log("EthereumJS TestRPC v" + pkg.version);

server.listen(options.port, function(err, blockchain) {
  if (err) {
    console.log(err);
    return;
  }
  console.log("");
  console.log("Available Accounts");
  console.log("==================");

  var accounts = blockchain.accounts;
  var addresses = Object.keys(accounts);

  addresses.forEach(function(address, index) {
    console.log("(" + index + ") " + address);
  });

  console.log("");
  console.log("Private Keys");
  console.log("==================");

  addresses.forEach(function(address, index) {
    console.log("(" + index + ") " + accounts[address].secretKey.toString("hex"));
  });

  if (options.accounts == null) {
    console.log("");
    console.log("HD Wallet");
    console.log("==================");
    console.log("Mnemonic:      " + blockchain.mnemonic);
    console.log("Base HD Path:  " + blockchain.wallet_hdpath + "/{account_index}")
  }

  if (options.gasPrice) {
    console.log("");
    console.log("Gas Price");
    console.log("======================");
    console.log(options.gasPrice);
  }

  if (options.gasLimit) {
    console.log("");
    console.log("Gas Limit");
    console.log("======================");
    console.log(options.gasLimit);
  }

  console.log("");
  console.log("Listening on localhost:" + options.port);
});
